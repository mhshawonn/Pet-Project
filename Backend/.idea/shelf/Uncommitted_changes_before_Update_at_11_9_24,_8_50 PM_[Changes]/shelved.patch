Index: src/main/resources/serviceAccountKey.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\n  \"type\": \"service_account\",\n  \"project_id\": \"pets-b98b3\",\n  \"private_key_id\": \"6654f007bcf308258cde2e3d7a490a33efbd3c9e\",\n  \"private_key\": \"-----BEGIN PRIVATE KEY-----\\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCc6r7XDLdj905o\\npJmE6jzhl9rhrToA3ZhQv8zwscMLY1dJtoSIAhWStAH9+2POcApsaOkGBujDrc0x\\nZD+6tmU6V+oqLpFcy/8w53dA7A6Yzt3Ubd+VajuMKvR3iK6HaPp97xvAZyVpxmSv\\n95dB/XAeaU9eKnAkXBQzrAXlCKAc6RjaPbGqPVFof9AjMOC8mG3Fxj0G3lfBj2aF\\nJhzsHAwMNnvzKEIERF1BqzkEh4HPP18llkM9PBzHM99Zlpv1QG4depxWUWm5H2bv\\nBptsDB/tmYUEluyqT1KxRg2kyyR58PpLuEx8G7cr8Z9iRijU/l8JIgj4o1NSVCub\\niXGB3L7PAgMBAAECggEABpLY+tZYCnKOUNjwa36KnWLIsyKYJvghjOR0F/NCegQn\\n4HkqdS4tLC+pU7QH2tqbvS3p8Swx7RynV3XdK5u/guGy+CBqS4pqPui7eLdK50Dn\\nTyJpNu+z3evgwO8zbI3LzKHLNlS73wIGLs7/Aa811rhPsGCzwPowiHeg6ZbiakOS\\nz4KpUgqfa4eb+5HWKP7dzFwuEYl4doTa9aF0emxFXxEGlLUeSSouxpLibp92zeZ/\\nI6v5ew4Y39KeoxEFNP+rYlyb/ud879LfJFuauQ6R+TpyEpe0tSPEBgXeEwfuk90+\\nKcr8XaLF8DYnMpvmpMwduoWTsFuRndnm3DLuxRTiqQKBgQDOkfKUTnkkaVVX7/7m\\nbfKLdTIEg9RsM+b0vUlrCs01hIxluZPeJSD09yhwsuUwj52tfSJxLiglbraaznCQ\\na8v7o3cBS/0vU3KLVXZa1qGttYdVF3xmZmQN8ucpXi3BeASt0FaYl6DSsWcdpO+X\\n0svfxSyA/3Jjsm8dXIvlsJZbqQKBgQDCdyagKQAiigyhZZw1EPcGbO1SUfFB2ebH\\nnNaTxhqv/Skp+IYT74FnAiOUkWwaYy0K7EbFDHW9E3Ft+RFpqhoDDDhw/HvfFS1l\\nrAyhroSBQAEYeM2SEzOoKTD10KlD4hjd2GDNVi1yZY1/wc3833CYSdoBMi9+P3qx\\nFh9ZjtMRtwKBgF4nyBoxaqZeHLhofBcsJlHKqXHFZR2syqjjXoOb+M1cDWKQpAWt\\nhsghoB0+bZkk3Qom73wHPeVSAYmub0Bk4iVg7O16ZX0c3CkGW1wsWKWFCJqQifNi\\n2FhDT3pbox98RSW0wMPs2TEwC4BHna3mN2dXyGFEDi/DNUJ83IdlZiOBAoGAS0O8\\ncl6MC9IsY0cldzByu0zraWIHozoH5RghwJ369ERiazkiA5M+HTUpujWyhl/+Le0W\\n0usoop5k13B/ucq5OJbBPZGrC8Nxh5lYZjdaV4ADLIqM3c2Kv7n5lhpFeN2ITEyT\\n4sVI367IXjsPU6DTPk3PD4lx8kX1YZazWYE61e8CgYEAiMZ6mdU2yOjTPVXJv855\\n7BgrSZWV7NdcJbKi4ovWf8XLJeJB8FN1x0+RWj7mVSZi8jU0Jfk02At0bvhM5JwU\\n/UmB1zg3TRH0cxdn4qJiz33KV+ix2JzcMA8evHNabITjjp/0TpRLLveHzK1/WAqs\\nhSX140RbRldCzsMWVpaGNsE=\\n-----END PRIVATE KEY-----\\n\",\n  \"client_email\": \"firebase-adminsdk-kmy9o@pets-b98b3.iam.gserviceaccount.com\",\n  \"client_id\": \"114441715385629312902\",\n  \"auth_uri\": \"https://accounts.google.com/o/oauth2/auth\",\n  \"token_uri\": \"https://oauth2.googleapis.com/token\",\n  \"auth_provider_x509_cert_url\": \"https://www.googleapis.com/oauth2/v1/certs\",\n  \"client_x509_cert_url\": \"https://www.googleapis.com/robot/v1/metadata/x509/firebase-adminsdk-kmy9o%40pets-b98b3.iam.gserviceaccount.com\",\n  \"universe_domain\": \"googleapis.com\"\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/resources/serviceAccountKey.json b/src/main/resources/serviceAccountKey.json
--- a/src/main/resources/serviceAccountKey.json	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/resources/serviceAccountKey.json	(date 1731003923056)
@@ -1,8 +1,8 @@
 {
   "type": "service_account",
   "project_id": "pets-b98b3",
-  "private_key_id": "6654f007bcf308258cde2e3d7a490a33efbd3c9e",
-  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvQIBADANBgkqhkiG9w0BAQEFAASCBKcwggSjAgEAAoIBAQCc6r7XDLdj905o\npJmE6jzhl9rhrToA3ZhQv8zwscMLY1dJtoSIAhWStAH9+2POcApsaOkGBujDrc0x\nZD+6tmU6V+oqLpFcy/8w53dA7A6Yzt3Ubd+VajuMKvR3iK6HaPp97xvAZyVpxmSv\n95dB/XAeaU9eKnAkXBQzrAXlCKAc6RjaPbGqPVFof9AjMOC8mG3Fxj0G3lfBj2aF\nJhzsHAwMNnvzKEIERF1BqzkEh4HPP18llkM9PBzHM99Zlpv1QG4depxWUWm5H2bv\nBptsDB/tmYUEluyqT1KxRg2kyyR58PpLuEx8G7cr8Z9iRijU/l8JIgj4o1NSVCub\niXGB3L7PAgMBAAECggEABpLY+tZYCnKOUNjwa36KnWLIsyKYJvghjOR0F/NCegQn\n4HkqdS4tLC+pU7QH2tqbvS3p8Swx7RynV3XdK5u/guGy+CBqS4pqPui7eLdK50Dn\nTyJpNu+z3evgwO8zbI3LzKHLNlS73wIGLs7/Aa811rhPsGCzwPowiHeg6ZbiakOS\nz4KpUgqfa4eb+5HWKP7dzFwuEYl4doTa9aF0emxFXxEGlLUeSSouxpLibp92zeZ/\nI6v5ew4Y39KeoxEFNP+rYlyb/ud879LfJFuauQ6R+TpyEpe0tSPEBgXeEwfuk90+\nKcr8XaLF8DYnMpvmpMwduoWTsFuRndnm3DLuxRTiqQKBgQDOkfKUTnkkaVVX7/7m\nbfKLdTIEg9RsM+b0vUlrCs01hIxluZPeJSD09yhwsuUwj52tfSJxLiglbraaznCQ\na8v7o3cBS/0vU3KLVXZa1qGttYdVF3xmZmQN8ucpXi3BeASt0FaYl6DSsWcdpO+X\n0svfxSyA/3Jjsm8dXIvlsJZbqQKBgQDCdyagKQAiigyhZZw1EPcGbO1SUfFB2ebH\nnNaTxhqv/Skp+IYT74FnAiOUkWwaYy0K7EbFDHW9E3Ft+RFpqhoDDDhw/HvfFS1l\nrAyhroSBQAEYeM2SEzOoKTD10KlD4hjd2GDNVi1yZY1/wc3833CYSdoBMi9+P3qx\nFh9ZjtMRtwKBgF4nyBoxaqZeHLhofBcsJlHKqXHFZR2syqjjXoOb+M1cDWKQpAWt\nhsghoB0+bZkk3Qom73wHPeVSAYmub0Bk4iVg7O16ZX0c3CkGW1wsWKWFCJqQifNi\n2FhDT3pbox98RSW0wMPs2TEwC4BHna3mN2dXyGFEDi/DNUJ83IdlZiOBAoGAS0O8\ncl6MC9IsY0cldzByu0zraWIHozoH5RghwJ369ERiazkiA5M+HTUpujWyhl/+Le0W\n0usoop5k13B/ucq5OJbBPZGrC8Nxh5lYZjdaV4ADLIqM3c2Kv7n5lhpFeN2ITEyT\n4sVI367IXjsPU6DTPk3PD4lx8kX1YZazWYE61e8CgYEAiMZ6mdU2yOjTPVXJv855\n7BgrSZWV7NdcJbKi4ovWf8XLJeJB8FN1x0+RWj7mVSZi8jU0Jfk02At0bvhM5JwU\n/UmB1zg3TRH0cxdn4qJiz33KV+ix2JzcMA8evHNabITjjp/0TpRLLveHzK1/WAqs\nhSX140RbRldCzsMWVpaGNsE=\n-----END PRIVATE KEY-----\n",
+  "private_key_id": "2d851a78841fe70c9597431271cd5f8495fb253b",
+  "private_key": "-----BEGIN PRIVATE KEY-----\nMIIEvAIBADANBgkqhkiG9w0BAQEFAASCBKYwggSiAgEAAoIBAQC7W0XINvJmsSvP\nhsX2RGjuq2dxPY2ptFOST6AEnvYUwWm4x9W/HJ2JRCYEFDSH/Adp/E2f7vT1oZTS\ncqj3td+Xe+k2gHhjHrnA/eG6JKfuZLY3lD/JfBOCA4eYKQSX6Aq5T8UsfGKycmPJ\ntVk4+exQfhCtmmlOoYq0NPIsGNWRsXvSsXIg2r+FXPRn5Kg42uf85d4idbHjQq4y\nuxz5tzBVU0gWi+rCYEtmW+Ey9zYpv2K7n9cbzGrqGKoTEAzQT8Np+Jsf26oSLCy6\n+JPDOujX05sThlI6c02Ytk3Rn4PZ7Y1teSiiSmhxQN15LRS6TVe2C7GRqBC5sfPt\nmMAA/6HtAgMBAAECggEAJLu6NI1LXOV/PrbAoO5cOXErPJlSKVP077KDX+yPuFWM\nhiFOD+SLIZLWNkYE36WDCZ1hVcpaxj8KJ/G5namPv0pY2On60IpBZqyQQXf24edm\nj4KWOAmG5J6PCv79ys/ArIEOmlB/5FdHp9BRwDlGAykYWYU1AOjswjTAR3OOCfyQ\nwo54l8u8p5NHYNaNHS37V1kO7KOEYwstPPawyZ1rJQQdc9m8kLPyK+mN1n2fWYJN\npWEEQDiB9qgND0YHpGLeCQPdThPZpQcPIhkftSj4arQd5QIAY1PIpofrCFsdkXPk\nSAFwfHPv+xKi3IUi/sJ3W0xw2EqE7P8FNA59zn9GiQKBgQD+Lfz62YQ7MhWDxCOk\nuH/B0BgzdMKZx11hTXzaDF1Wy2izO7dxpsv1f8nL/pN/MyuR2WsCl2lIdzh8fc3k\ntUIMGDAOe2pGMBSO4/PNj1cSZ50MqtvHd0XppmvRMLxjQFiOV9o9a9fOA0vlqKgU\ncuRD7OMAinOeqh1qrYuroOOVpQKBgQC8ssVtfGrI72E4wyeQp1bSAyK+cYrPBNuq\ns6U9fKpZjrZym3XDoJFI6JLLisw+5cTefhu21ORu8jSamNuXzXZBY/xBCNBKY4Kd\n3JeRfB+duRtiRWyB/+KiLPvX2NWAVInZgY+gt2r/sx0M1J5puvOgeqj4VtD2x6cu\nLx4KxIL4qQKBgDlRr5n2EV60BawIQC12OcFAJyT7cKLzFXjK25vka+wVxM+eaNjl\nT1tWbPBmwWZO6MVkLUCRWnmwAPn5+MNZqMJHdhbd9/JKB2jNuP4jE/Sfjwf7Q8Kw\ngACXufqbrfAH47B92UY+mpTno2bv6K9r1VQICIznq/kczbNv3W5fwtLNAoGAf9wG\nqLxQQxzo3KRnz72Dt8QGK9MVwlbBXbZidfpeF1b7S0cJkeff6e4lYaQH52qbbkM3\nFjjFHGQjvslqqj6/LWnJiGunb3BkFgFd9meLqLy/0GPINYIkl80xTL2RVWZzDZ2b\nq8P8zYwZWBNNz8iswgW7LqLs7vqzzjiA+7zSHhkCgYA64SkdAMowY6nRKtoUAxwm\ng9tw+XBspvRdFxWR2TI/QW2MqufdUPEpP2kSSGZoKiKZyJAgGtmPu5CVz/1xrlW5\nJif5y+OcC0EWXjrT0gczLVOjTxQwiO2oUOt4EHobVGpb3/0+XktcHDwd2yyHNkUo\nf4u2sn2L8+4AMtf1VGXWTA==\n-----END PRIVATE KEY-----\n",
   "client_email": "firebase-adminsdk-kmy9o@pets-b98b3.iam.gserviceaccount.com",
   "client_id": "114441715385629312902",
   "auth_uri": "https://accounts.google.com/o/oauth2/auth",
Index: src/main/java/com/pet/Pet/PetApplication.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet;\n\nimport org.springframework.boot.SpringApplication;\nimport org.springframework.boot.autoconfigure.SpringBootApplication;\n\n@SpringBootApplication\npublic class PetApplication {\n\n\tpublic static void main(String[] args) {\n\t\tSpringApplication.run(PetApplication.class, args);\n\t}\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/PetApplication.java b/src/main/java/com/pet/Pet/PetApplication.java
--- a/src/main/java/com/pet/Pet/PetApplication.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/PetApplication.java	(date 1731073429892)
@@ -9,5 +9,4 @@
 	public static void main(String[] args) {
 		SpringApplication.run(PetApplication.class, args);
 	}
-
 }
Index: src/main/java/com/pet/Pet/Model/Address.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Model;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.HashSet;\nimport java.util.Set;\n\n@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Address {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String zipcode;\n    private String city;\n    private String state;\n    private String country;\n\n    @OneToMany(mappedBy = \"address\", cascade = CascadeType.ALL)\n    private Set<Pet> pets = new HashSet<>();\n\n    @OneToMany(mappedBy = \"address\", cascade = CascadeType.ALL)\n    private Set<Users>  users = new HashSet<>();\n\n    public Address orElse(Object o) {\n        return null;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Model/Address.java b/src/main/java/com/pet/Pet/Model/Address.java
--- a/src/main/java/com/pet/Pet/Model/Address.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Model/Address.java	(date 1731070979025)
@@ -1,5 +1,7 @@
 package com.pet.Pet.Model;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonProperty;
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -21,6 +23,7 @@
     private String state;
     private String country;
 
+
     @OneToMany(mappedBy = "address", cascade = CascadeType.ALL)
     private Set<Pet> pets = new HashSet<>();
 
Index: src/main/java/com/pet/Pet/DTO/UserDTO.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/DTO/UserDTO.java b/src/main/java/com/pet/Pet/DTO/UserDTO.java
new file mode 100644
--- /dev/null	(date 1731056328900)
+++ b/src/main/java/com/pet/Pet/DTO/UserDTO.java	(date 1731056328900)
@@ -0,0 +1,17 @@
+package com.pet.Pet.DTO;
+
+import com.google.firebase.database.annotations.NotNull;
+import jakarta.persistence.Column;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@AllArgsConstructor
+@NoArgsConstructor
+@Data
+public class UserDTO {
+    private Long id;
+    private String username;
+    private String name;
+    private String profilePic;
+}
Index: src/main/java/com/pet/Pet/Model/Comment.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Model;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Comment {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String content;\n    @OrderBy(\"commentDate DESC\")\n    private Long commentDate;\n    private Long reactCount;\n    private int ReactType;\n    private int numberOfChildComments;\n    private List<String> media;\n    private boolean isBanned;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_to_id\", referencedColumnName = \"id\")\n    private Users userTo;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_from_id\", referencedColumnName = \"id\")\n    private Users userFrom;\n\n    @ManyToOne\n    @JoinColumn(name = \"blog_id\", referencedColumnName = \"id\")\n    private Blog blog;\n\n    @ManyToOne\n    @JoinColumn(name = \"parent_id\", referencedColumnName = \"id\")\n    private Comment parent;\n\n    @OneToMany(mappedBy = \"parent\", cascade = CascadeType.ALL)\n    private List<Comment> childComments;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Model/Comment.java b/src/main/java/com/pet/Pet/Model/Comment.java
--- a/src/main/java/com/pet/Pet/Model/Comment.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Model/Comment.java	(date 1731079333313)
@@ -1,5 +1,6 @@
 package com.pet.Pet.Model;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -33,10 +34,12 @@
     @JoinColumn(name = "user_from_id", referencedColumnName = "id")
     private Users userFrom;
 
+    @JsonIgnore
     @ManyToOne
     @JoinColumn(name = "blog_id", referencedColumnName = "id")
     private Blog blog;
 
+    @JsonIgnore
     @ManyToOne
     @JoinColumn(name = "parent_id", referencedColumnName = "id")
     private Comment parent;
Index: src/main/java/com/pet/Pet/DTO/PetDTO.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/DTO/PetDTO.java b/src/main/java/com/pet/Pet/DTO/PetDTO.java
new file mode 100644
--- /dev/null	(date 1731089110426)
+++ b/src/main/java/com/pet/Pet/DTO/PetDTO.java	(date 1731089110426)
@@ -0,0 +1,28 @@
+package com.pet.Pet.DTO;
+
+import com.pet.Pet.Model.Address;
+import com.pet.Pet.Model.Users;
+import jakarta.persistence.Column;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+import java.util.List;
+
+@AllArgsConstructor
+@NoArgsConstructor
+@Data
+public class PetDTO {
+    private Long id;
+    private String name;
+    private String description;
+    private Long timeStamp;
+    private List<String> media;
+    private Long ownerId;
+    private String ownerName;
+    private String ownerProfilePic;
+    private Address address;
+    private Long numberOfReact;
+    private Long numberOfRequests;
+    private int reactType;
+}
Index: src/main/java/com/pet/Pet/Model/Blog.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Model;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Blog {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String  title;\n    @Lob\n    private String content;\n    private Long reactCount;\n    private Long numberOfReports;\n    private Long publicationDate;\n    @OrderBy(\"lastUpdate DESC\")\n    private Long lastUpdate;\n    private boolean featured;\n    private int ReactType;\n    private List<String> media;\n    private boolean isBanned;\n    private Long numberOfComments;\n\n    @ManyToOne\n    @JoinColumn(name = \"author_id\", referencedColumnName = \"id\")\n    private Users author;\n\n    @ManyToMany\n    @JoinTable(\n            name = \"blog_tags\",\n            joinColumns = @JoinColumn(name = \"blog_id\",referencedColumnName = \"id\"),\n            inverseJoinColumns = @JoinColumn(name = \"tag_id\",referencedColumnName = \"id\")\n    )\n    private List<Tags> tags;\n\n    @OneToMany(mappedBy=\"blog\",cascade = CascadeType.ALL)\n    private List<Comment> comments;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Model/Blog.java b/src/main/java/com/pet/Pet/Model/Blog.java
--- a/src/main/java/com/pet/Pet/Model/Blog.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Model/Blog.java	(date 1731085281646)
@@ -19,16 +19,17 @@
     private String  title;
     @Lob
     private String content;
-    private Long reactCount;
     private Long numberOfReports;
     private Long publicationDate;
     @OrderBy("lastUpdate DESC")
     private Long lastUpdate;
     private boolean featured;
-    private int ReactType;
     private List<String> media;
     private boolean isBanned;
     private Long numberOfComments;
+    private Long numberOfReact;
+    private Long numberOfComment;
+    private int reactType;
 
     @ManyToOne
     @JoinColumn(name = "author_id", referencedColumnName = "id")
Index: src/main/java/com/pet/Pet/Model/Interested.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/Model/Interested.java b/src/main/java/com/pet/Pet/Model/Interested.java
new file mode 100644
--- /dev/null	(date 1731083445651)
+++ b/src/main/java/com/pet/Pet/Model/Interested.java	(date 1731083445651)
@@ -0,0 +1,23 @@
+package com.pet.Pet.Model;
+
+import jakarta.persistence.Entity;
+import jakarta.persistence.GeneratedValue;
+import jakarta.persistence.GenerationType;
+import jakarta.persistence.Id;
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@Entity
+@Data
+@AllArgsConstructor
+@NoArgsConstructor
+public class Interested {
+    @Id
+    @GeneratedValue(strategy = GenerationType.IDENTITY)
+    private Long id;
+    private Long userId;
+    private Long petId;
+    private Long timestamp;
+    private String album;
+}
Index: src/main/java/com/pet/Pet/Model/Pet.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Model;\n\nimport com.google.api.client.util.DateTime;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Pet {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String Name;\n    @Column(length = 1000)\n    private String Description;\n    private float age;\n    private float weight;\n    @OrderBy(\"timeStamp DESC\")\n    private Long timeStamp;\n    private String exchange;\n    private String healthCondition;\n    private String breed;\n    private String training;\n    private String vaccine;\n    private String color;\n    private String temperament;\n    private String food;\n    private String gender;\n    private String street;\n    private List<String> media;\n    private String status;\n    private Long reactCount;\n    private int reactType;\n    private Long reportCount;\n    private Boolean reportStatus;\n    private Long numberOfRequests;\n\n    @ManyToOne\n    @JoinColumn(name = \"animal_id\", referencedColumnName = \"id\")\n    private Animal animal;\n\n    @ManyToMany\n    @JoinTable(\n            name = \"pet_category\",\n            joinColumns = @JoinColumn(name = \"pet_id\",referencedColumnName = \"id\"),\n            inverseJoinColumns = @JoinColumn(name = \"category_id\",referencedColumnName = \"id\"))\n    private List<Category> categories;\n\n    @ManyToOne\n    @JoinColumn(name = \"owner_id\", referencedColumnName = \"id\")\n    private Users owner;\n\n    @OneToMany(mappedBy = \"pet\", cascade = CascadeType.ALL)\n    private List<AdoptionRequest> adoptionRequests;\n\n    @ManyToOne\n    @JoinColumn(name = \"address\", referencedColumnName = \"id\")\n    private Address address;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Model/Pet.java b/src/main/java/com/pet/Pet/Model/Pet.java
--- a/src/main/java/com/pet/Pet/Model/Pet.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Model/Pet.java	(date 1731085300820)
@@ -1,6 +1,7 @@
 package com.pet.Pet.Model;
 
 import com.google.api.client.util.DateTime;
+import com.pet.Pet.DTO.UserDTO;
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -17,9 +18,9 @@
     @Id
     @GeneratedValue(strategy = GenerationType.IDENTITY)
     private Long id;
-    private String Name;
+    private String name;
     @Column(length = 1000)
-    private String Description;
+    private String description;
     private float age;
     private float weight;
     @OrderBy("timeStamp DESC")
@@ -36,7 +37,7 @@
     private String street;
     private List<String> media;
     private String status;
-    private Long reactCount;
+    private Long numberOfReact;
     private int reactType;
     private Long reportCount;
     private Boolean reportStatus;
Index: src/main/java/com/pet/Pet/Repo/AdoptionRepo.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/Repo/AdoptionRepo.java b/src/main/java/com/pet/Pet/Repo/AdoptionRepo.java
new file mode 100644
--- /dev/null	(date 1731088719813)
+++ b/src/main/java/com/pet/Pet/Repo/AdoptionRepo.java	(date 1731088719813)
@@ -0,0 +1,8 @@
+package com.pet.Pet.Repo;
+
+import com.pet.Pet.Model.AdoptionRequest;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface AdoptionRepo extends JpaRepository<AdoptionRequest,Long> {
+    Long countByPetId(Long petId);
+}
Index: src/main/java/com/pet/Pet/Service/BlogService.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/Service/BlogService.java b/src/main/java/com/pet/Pet/Service/BlogService.java
new file mode 100644
--- /dev/null	(date 1731068877112)
+++ b/src/main/java/com/pet/Pet/Service/BlogService.java	(date 1731068877112)
@@ -0,0 +1,59 @@
+package com.pet.Pet.Service;
+
+import com.pet.Pet.Model.Blog;
+import com.pet.Pet.Model.Category;
+import com.pet.Pet.Model.Tags;
+import com.pet.Pet.Model.Users;
+import com.pet.Pet.Repo.BlogRepo;
+import com.pet.Pet.Repo.TagRepo;
+import com.pet.Pet.Repo.UsersRepo;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.UserDetails;
+import org.springframework.stereotype.Service;
+import org.springframework.web.multipart.MultipartFile;
+
+import javax.swing.text.TableView;
+import java.io.IOException;
+import java.util.ArrayList;
+import java.util.List;
+import java.util.Optional;
+
+@Service
+public class BlogService {
+    @Autowired
+    private BlogRepo blogRepo;
+    @Autowired
+    private UsersRepo usersRepo;
+    @Autowired
+    private FirebaseService firebaseService;
+    @Autowired
+    private TagRepo tagRepo;
+    public String addBlog(Blog blog, List<MultipartFile> files,List<Long> tagIds) throws IOException {
+        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
+        Users user = usersRepo.findByUsername(userDetails.getUsername());
+        blog.setAuthor(user);
+        if (userDetails.getAuthorities().stream().anyMatch(a -> a.getAuthority().equals("ADMIN"))) {
+            blog.setFeatured(true);
+        }
+        List<String> urls = firebaseService.uploadFiles(files);
+        blog.setMedia(urls);
+
+        blog.setLastUpdate(System.currentTimeMillis());
+        blog.setPublicationDate(System.currentTimeMillis());
+
+        List<Tags>  tags = new ArrayList<Tags>();
+        for (Long tagId : tagIds) {
+            Tags tag = (Tags) tagRepo.findById(tagId).orElse(null);
+            if (tag == null) continue;
+            tags.add(tag);
+        }
+        blog.setTags(tags);
+        blogRepo.save(blog);
+        return "Blog added successfully";
+    }
+
+    public Blog getBlog(Long id) {
+        return blogRepo.findById(id).orElse(null);
+    }
+}
Index: src/main/java/com/pet/Pet/Config/SecuirityConfig.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Config;\n\nimport com.pet.Pet.Filter.JwtFilter;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.context.annotation.Bean;\nimport org.springframework.context.annotation.Configuration;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.AuthenticationProvider;\nimport org.springframework.security.authentication.dao.DaoAuthenticationProvider;\nimport org.springframework.security.config.Customizer;\nimport org.springframework.security.config.annotation.authentication.configuration.AuthenticationConfiguration;\nimport org.springframework.security.config.annotation.method.configuration.EnableGlobalMethodSecurity;\nimport org.springframework.security.config.annotation.method.configuration.EnableMethodSecurity;\nimport org.springframework.security.config.annotation.web.builders.HttpSecurity;\nimport org.springframework.security.config.annotation.web.configuration.EnableWebSecurity;\nimport org.springframework.security.config.annotation.web.configurers.AbstractHttpConfigurer;\nimport org.springframework.security.config.http.SessionCreationPolicy;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.userdetails.User;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.core.userdetails.UserDetailsService;\nimport org.springframework.security.core.userdetails.UsernameNotFoundException;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.security.crypto.password.NoOpPasswordEncoder;\nimport org.springframework.security.provisioning.InMemoryUserDetailsManager;\nimport org.springframework.security.web.SecurityFilterChain;\nimport org.springframework.security.web.authentication.UsernamePasswordAuthenticationFilter;\n\n@Configuration\n@EnableWebSecurity\n@EnableMethodSecurity(prePostEnabled = true)\npublic class SecuirityConfig {\n    @Autowired\n    private UserDetailsService userDetailsService;\n\n    @Autowired\n    private JwtFilter jwtFilter;\n\n    @Bean\n    public SecurityFilterChain securityFilterChain(HttpSecurity httpSecurity){\n        try {\n            httpSecurity\n                    .csrf(AbstractHttpConfigurer::disable)\n                    .authorizeHttpRequests(request->request\n                            .requestMatchers(\"/user/register\",\"/user/verify/**\",\"/user/isHas/**\",\n                                    \"/user/login\",\"/user/reSentOtp/**\",\"/user/isHasEmail/**\")\n                            .permitAll()\n                            .anyRequest().authenticated())\n                    .httpBasic(Customizer.withDefaults())\n                    .sessionManagement(session->session\n                            .sessionCreationPolicy(SessionCreationPolicy.STATELESS))\n                    .addFilterBefore(jwtFilter, UsernamePasswordAuthenticationFilter.class);\n\n            return httpSecurity.build();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @Bean\n    public AuthenticationProvider authenticationProvider(){\n        DaoAuthenticationProvider provider = new DaoAuthenticationProvider();\n        provider.setPasswordEncoder(new BCryptPasswordEncoder(12));\n        provider.setUserDetailsService(userDetailsService);\n        return provider;\n    }\n\n    @Bean\n    public AuthenticationManager authenticationManager(AuthenticationConfiguration authenticationConfiguration){\n        try {\n            return authenticationConfiguration.getAuthenticationManager();\n        } catch (Exception e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Config/SecuirityConfig.java b/src/main/java/com/pet/Pet/Config/SecuirityConfig.java
--- a/src/main/java/com/pet/Pet/Config/SecuirityConfig.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Config/SecuirityConfig.java	(date 1731090314862)
@@ -43,7 +43,8 @@
                     .csrf(AbstractHttpConfigurer::disable)
                     .authorizeHttpRequests(request->request
                             .requestMatchers("/user/register","/user/verify/**","/user/isHas/**",
-                                    "/user/login","/user/reSentOtp/**","/user/isHasEmail/**")
+                                    "/user/login","/user/reSentOtp/**","/user/isHasEmail/**","pet/get/**"
+                                    ,"pet/getById/**")
                             .permitAll()
                             .anyRequest().authenticated())
                     .httpBasic(Customizer.withDefaults())
Index: src/main/java/com/pet/Pet/Repo/BlogRepo.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/Repo/BlogRepo.java b/src/main/java/com/pet/Pet/Repo/BlogRepo.java
new file mode 100644
--- /dev/null	(date 1731012474462)
+++ b/src/main/java/com/pet/Pet/Repo/BlogRepo.java	(date 1731012474462)
@@ -0,0 +1,7 @@
+package com.pet.Pet.Repo;
+
+import com.pet.Pet.Model.Blog;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface BlogRepo extends JpaRepository<Blog,Long> {
+}
Index: src/main/java/com/pet/Pet/Repo/TagRepo.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/Repo/TagRepo.java b/src/main/java/com/pet/Pet/Repo/TagRepo.java
new file mode 100644
--- /dev/null	(date 1731013788790)
+++ b/src/main/java/com/pet/Pet/Repo/TagRepo.java	(date 1731013788790)
@@ -0,0 +1,9 @@
+package com.pet.Pet.Repo;
+
+import com.pet.Pet.Model.Tags;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.stereotype.Repository;
+
+@Repository
+public interface TagRepo extends JpaRepository<Tags,Long> {
+}
Index: src/main/java/com/pet/Pet/Model/Category.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Model;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.List;\n\n@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Category {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    private String name;\n\n    @ManyToOne\n    @JoinColumn(name = \"animal_id\", referencedColumnName = \"id\")\n    private Animal animal;\n\n    @ManyToMany(mappedBy = \"categories\")\n    private List<Pet> pets;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Model/Category.java b/src/main/java/com/pet/Pet/Model/Category.java
--- a/src/main/java/com/pet/Pet/Model/Category.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Model/Category.java	(date 1731008306106)
@@ -1,5 +1,6 @@
 package com.pet.Pet.Model;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -17,10 +18,12 @@
     private Long id;
     private String name;
 
+    @JsonIgnore
     @ManyToOne
     @JoinColumn(name = "animal_id", referencedColumnName = "id")
     private Animal animal;
 
+    @JsonIgnore
     @ManyToMany(mappedBy = "categories")
     private List<Pet> pets;
 }
Index: src/main/java/com/pet/Pet/Model/Animal.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Model;\n\nimport com.google.firebase.database.annotations.NotNull;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.util.List;\n\n@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Animal {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @NotNull\n    private String name;\n\n    @OneToMany(mappedBy = \"animal\", cascade = CascadeType.ALL)\n    private List<Category> categories;\n\n    @OneToMany(mappedBy = \"animal\", cascade = CascadeType.ALL)\n    private List<Pet> pets;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Model/Animal.java b/src/main/java/com/pet/Pet/Model/Animal.java
--- a/src/main/java/com/pet/Pet/Model/Animal.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Model/Animal.java	(date 1731008286402)
@@ -1,5 +1,6 @@
 package com.pet.Pet.Model;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import com.google.firebase.database.annotations.NotNull;
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
@@ -19,9 +20,11 @@
     @NotNull
     private String name;
 
+    @JsonIgnore
     @OneToMany(mappedBy = "animal", cascade = CascadeType.ALL)
     private List<Category> categories;
 
+    @JsonIgnore
     @OneToMany(mappedBy = "animal", cascade = CascadeType.ALL)
     private List<Pet> pets;
 }
Index: src/main/java/com/pet/Pet/Controller/BlogController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Controller;\n\npublic class BlogController {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Controller/BlogController.java b/src/main/java/com/pet/Pet/Controller/BlogController.java
--- a/src/main/java/com/pet/Pet/Controller/BlogController.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Controller/BlogController.java	(date 1731045360184)
@@ -1,4 +1,28 @@
 package com.pet.Pet.Controller;
 
+import com.pet.Pet.Model.Blog;
+import com.pet.Pet.Model.Tags;
+import com.pet.Pet.Service.BlogService;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.web.bind.annotation.*;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.io.IOException;
+import java.util.List;
+
+@RestController
+@RequestMapping("/blog")
 public class BlogController {
+    @Autowired
+    private BlogService blogService;
+    @PostMapping("/add")
+    public String addBlog(@RequestPart Blog blog, @RequestPart List<MultipartFile> files,
+                          @RequestParam List<Long> tag) throws IOException {
+        return blogService.addBlog(blog,files,tag);
+    }
+    @GetMapping("/get/{id}")
+    public Blog getBlogs(@PathVariable Long id) {
+        return blogService.getBlog(id);
+    }
+
 }
Index: src/main/java/com/pet/Pet/DTO/ReactDTO.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/DTO/ReactDTO.java b/src/main/java/com/pet/Pet/DTO/ReactDTO.java
new file mode 100644
--- /dev/null	(date 1731092740690)
+++ b/src/main/java/com/pet/Pet/DTO/ReactDTO.java	(date 1731092740690)
@@ -0,0 +1,15 @@
+package com.pet.Pet.DTO;
+
+import lombok.AllArgsConstructor;
+import lombok.Data;
+import lombok.NoArgsConstructor;
+
+@AllArgsConstructor
+@NoArgsConstructor
+@Data
+public class ReactDTO {
+    private Long id;
+    private int reactType;
+    private Long timestamp;
+    private UserDTO user;
+}
Index: src/main/java/com/pet/Pet/Repo/ReactRepo.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/Repo/ReactRepo.java b/src/main/java/com/pet/Pet/Repo/ReactRepo.java
new file mode 100644
--- /dev/null	(date 1731141551985)
+++ b/src/main/java/com/pet/Pet/Repo/ReactRepo.java	(date 1731141551985)
@@ -0,0 +1,36 @@
+package com.pet.Pet.Repo;
+
+import com.pet.Pet.Model.React;
+import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
+import org.springframework.stereotype.Repository;
+
+import java.util.List;
+
+@Repository
+public interface ReactRepo extends JpaRepository<React,Long> {
+
+    Long countByPostIdAndPostTypeAndIsSavedFalse(Long postId, int postType);
+
+    int findByUserIdAndPostIdAndPostTypeAndIsSavedFalse(Long id, Long id1, int i);
+
+    List<React> findByPostIdAndPostTypeAndIsSavedFalse(Long id, int i);
+
+    @Query("SELECT r FROM React r WHERE r.postId = :postId AND r.postType = :postType AND r.userId = :userId AND r.isSaved = false")
+    React findByPostIdAndPostTypeAndUserIdAndIsSavedFalse(Long postId, int postType, Long userId);
+
+    @Query("SELECT r FROM React r WHERE r.postId = :postId AND r.postType = :postType AND r.userId = :userId AND r.isSaved = true")
+    React findByPostIdAndPostTypeAndUserIdAndIsSavedTrue(Long postId, int postType, Long userId);
+
+
+    @Query("SELECT r.postId FROM React r WHERE r.userId = :userId AND r.postType = :postType AND r.isSaved = true")
+    List<Long> findPostIdsByUserIdAndPostTypeAndIsSavedTrue(Long userId,int postType);
+
+    @Query("SELECT r.reactType, COUNT(r) " +
+            "FROM React r " +
+            "WHERE r.postId = :postId AND r.postType = :postType AND r.isSaved = false " +
+            "GROUP BY r.reactType")
+    List<Object[]> getCountGroupedByReactType(Long postId,int postType);
+
+}
\ No newline at end of file
Index: src/main/java/com/pet/Pet/Service/ReactService.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/Service/ReactService.java b/src/main/java/com/pet/Pet/Service/ReactService.java
new file mode 100644
--- /dev/null	(date 1731141551975)
+++ b/src/main/java/com/pet/Pet/Service/ReactService.java	(date 1731141551975)
@@ -0,0 +1,80 @@
+package com.pet.Pet.Service;
+
+import com.pet.Pet.DTO.ReactDTO;
+import com.pet.Pet.Model.React;
+import com.pet.Pet.Model.UserPrincipal;
+import com.pet.Pet.Repo.ReactRepo;
+import com.pet.Pet.Repo.UsersRepo;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.stereotype.Service;
+
+import java.util.ArrayList;
+import java.util.List;
+
+@Service
+public class ReactService {
+    @Autowired
+    private ReactRepo reactRepo;
+    @Autowired
+    private UsersRepo usersRepo;
+    @Autowired
+    private UserService userService;
+
+    public List<ReactDTO> getReact(Long id,int type) {
+        List<React> reacts = reactRepo.findByPostIdAndPostTypeAndIsSavedFalse(id,type);
+        List<ReactDTO> reactDTOS = new ArrayList<>();
+        for(React react : reacts) {
+            ReactDTO reactDTO = new ReactDTO();
+            reactDTO.setId(react.getId());
+            reactDTO.setReactType(react.getReactType());
+            reactDTO.setUser(usersRepo.findByIdFilter(react.getUserId()));
+            reactDTO.setTimestamp(react.getTimestamp());
+            reactDTOS.add(reactDTO);
+        }
+        return reactDTOS;
+    }
+
+    public String giveReact(Long id, int type, int i) {
+        UserPrincipal userPrincipal = userService.getUserPrincipal();
+        if(userPrincipal == null) {
+            throw new RuntimeException("User not authenticated");
+        }
+        React react = reactRepo.findByPostIdAndPostTypeAndUserIdAndIsSavedFalse(id,type,userPrincipal.getId());
+        if(react == null) {
+            react = new React();
+            react.setPostId(id);
+            react.setPostType(i);
+            react.setReactType(type);
+            react.setUserId(userPrincipal.getId());
+            react.setTimestamp(System.currentTimeMillis());
+            reactRepo.save(react);
+            return "Reacted";
+        }
+        react.setReactType(type);
+        reactRepo.save(react);
+        return "React Updated";
+    }
+
+    public String saveLater(Long id, int i) {
+        UserPrincipal userPrincipal = userService.getUserPrincipal();
+        if(userPrincipal == null) {
+            throw new RuntimeException("User not authenticated");
+        }
+        React react = reactRepo.findByPostIdAndPostTypeAndUserIdAndIsSavedTrue(id,i,userPrincipal.getId());
+        if(react == null) {
+            react = new React();
+            react.setPostId(id);
+            react.setPostType(i);
+            react.setUserId(userPrincipal.getId());
+            react.setSaved(true);
+            react.setTimestamp(System.currentTimeMillis());
+            reactRepo.save(react);
+            return "Saved";
+        }
+        return "Already saved";
+    }
+
+    public List<Object[]> getReactCount(Long id, int i) {
+        return reactRepo.getCountGroupedByReactType(id,i);
+    }
+}
Index: src/main/java/com/pet/Pet/Controller/UserController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Controller;\n\n\nimport com.pet.Pet.Model.Users;\nimport com.pet.Pet.Service.UserService;\nimport org.apache.coyote.Response;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.HttpStatus;\nimport org.springframework.http.HttpStatusCode;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.core.annotation.AuthenticationPrincipal;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.util.Map;\n\n@RestController\n@RequestMapping(\"/user\")\npublic class UserController {\n    @Autowired\n    private UserService userService;\n\n    @PostMapping(\"/register\")\n    public ResponseEntity<?> register(@RequestBody Users user) {\n        try {\n            Users new_user = userService.register(user);\n            return new ResponseEntity<>(new_user, HttpStatus.CREATED);\n        }catch(Exception e){\n            throw new RuntimeException(e);\n        }\n    }\n\n    @PostMapping(\"/verify/{email}\")\n    public String verifyEmail(@PathVariable String email, @RequestBody Map<String, String> requestBody){\n        String Otp = requestBody.get(\"Otp\");\n        return userService.verifyEmail(email,Otp);\n    }\n\n    @GetMapping(\"/isHas/{username}\")\n    public ResponseEntity<?> isHas(@PathVariable String username){\n        try {\n            if(username.contains(\"@\")){\n                return new ResponseEntity<>(\"@ not allowed in username\", HttpStatus.BAD_REQUEST);\n            }\n            boolean isHas = userService.isAvailable(username);\n            return new ResponseEntity<>(isHas, HttpStatus.OK);\n        } catch (RuntimeException e) {\n            throw new RuntimeException(e);\n        }\n    }\n\n    @GetMapping(\"/isHasEmail/{email}\")\n    public ResponseEntity<?> isHasEmail(@PathVariable String email){\n       return userService.isHaveEmail(email);\n    }\n\n    @PostMapping(\"/login\")\n    public String login(@RequestBody Map<String, String> requestBody){\n        String username = requestBody.get(\"username\");\n        String password = requestBody.get(\"password\");\n        return userService.verify(username,password);\n    }\n\n    @GetMapping(\"/reSentOtp/{email}\")\n    public ResponseEntity<?> profile(@PathVariable String email) throws Exception {\n        Users user = userService.sendOtp(email);\n        return new ResponseEntity<>(user, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/profilePic\")\n    public ResponseEntity<?> profilePic(@RequestPart MultipartFile multipartFile) throws IOException {\n        String status = userService.uploadPic(multipartFile,0);\n        return new ResponseEntity<>(status, HttpStatus.OK);\n    }\n\n    @PostMapping(\"/coverPic\")\n    public ResponseEntity<?> coverPic(@RequestPart MultipartFile multipartFile) throws IOException {\n        String status = userService.uploadPic(multipartFile,1);\n        return new ResponseEntity<>(status, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/myProfile\")\n    public Users getMyProfile() throws IOException {\n        return userService.getMyProfile();\n    }\n\n    @GetMapping(\"/Profile/{id}\")\n    public Users Profile(@PathVariable Long id) throws IOException {\n        return userService.getProfile(id);\n    }\n\n//    @GetMapping(\"/logout\")\n//    public String logout(@AuthenticationPrincipal Users user) {\n//\n//        return \"Logged Out\";\n//    }\n\n    @PostMapping(\"/updateBio\")\n    public ResponseEntity<?> updateBio(@RequestBody Map<String, String> requestBody) {\n        String newBio = requestBody.get(\"bio\");\n        Users updatedUser = userService.updateBio(newBio);\n        return new ResponseEntity<>(updatedUser, HttpStatus.OK);\n    }\n\n    @GetMapping(\"/upadteAddress/{id}\")\n    public String updateAddress(@PathVariable Long id) {\n        return userService.updateAddress(id);\n    }\n\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Controller/UserController.java b/src/main/java/com/pet/Pet/Controller/UserController.java
--- a/src/main/java/com/pet/Pet/Controller/UserController.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Controller/UserController.java	(date 1731133683241)
@@ -1,6 +1,8 @@
 package com.pet.Pet.Controller;
 
 
+import com.pet.Pet.DTO.PetDTO;
+import com.pet.Pet.DTO.UserDTO;
 import com.pet.Pet.Model.Users;
 import com.pet.Pet.Service.UserService;
 import org.apache.coyote.Response;
@@ -13,6 +15,7 @@
 import org.springframework.web.multipart.MultipartFile;
 
 import java.io.IOException;
+import java.util.List;
 import java.util.Map;
 
 @RestController
@@ -103,9 +106,13 @@
         return new ResponseEntity<>(updatedUser, HttpStatus.OK);
     }
 
-    @GetMapping("/upadteAddress/{id}")
-    public String updateAddress(@PathVariable Long id) {
+    @GetMapping("/updateAddress")
+    public String updateAddress(@RequestParam("id") long id) {
         return userService.updateAddress(id);
     }
 
+    @GetMapping("/userDto/{username}")
+    public ResponseEntity<UserDTO> getDTo(@PathVariable String username){
+        return userService.getUserDto(username);
+    }
 }
Index: src/main/java/com/pet/Pet/Service/UserService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Service;\n\nimport com.pet.Pet.Model.Address;\nimport com.pet.Pet.Model.Users;\nimport com.pet.Pet.Repo.AddressRepo;\nimport com.pet.Pet.Repo.UsersRepo;\nimport org.apache.catalina.User;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.http.ResponseEntity;\nimport org.springframework.security.authentication.AuthenticationManager;\nimport org.springframework.security.authentication.UsernamePasswordAuthenticationToken;\nimport org.springframework.security.core.Authentication;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.security.crypto.bcrypt.BCryptPasswordEncoder;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.util.Random;\nimport java.util.concurrent.TimeUnit;\n\n@Service\npublic class UserService {\n    @Autowired\n    private UsersRepo usersRepo;\n    @Autowired\n    private EmailService emailService;\n\n    @Autowired\n    private FirebaseService firebaseService;\n\n    @Autowired\n    AuthenticationManager authenticationManager;\n\n    @Autowired\n    private JwtService jwtService;\n\n    @Autowired\n    private AddressRepo addressRepo;\n\n    private final BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(12);\n\n    public Users OtpSender(Users user) throws Exception {\n        String OTP = String.format(\"%06d\", new Random().nextInt(1000000));\n        user.setOTP(OTP);\n        user.setExpireTimeOfOtp(System.currentTimeMillis()+ TimeUnit.MINUTES.toMillis(15));\n        String message = emailService.SendOtpMessage(user.getEmail(),OTP);\n        return usersRepo.save(user);\n    }\n\n    public Users register(Users user) throws Exception {\n        user.setPassword(encoder.encode(user.getPassword()));\n        user.setRole(\"USER\");\n        return OtpSender(user);\n    }\n\n    public Users sendOtp(String email) throws Exception {\n        Users user = usersRepo.findByEmail(email);\n        return OtpSender(user);\n    }\n\n    public String verifyEmail(String email, String otp) {\n        Users user = usersRepo.findByEmail(email);\n        if(!user.getOTP().equals(otp)){\n            return \"Invalid OTP\";\n        }\n        else if(user.getExpireTimeOfOtp() < System.currentTimeMillis()){\n            return \"OTP expired\";\n        }\n        user.setEnable(true);\n        usersRepo.save(user);\n        return \"Email verified\";\n    }\n\n    public boolean isAvailable(String username) {\n        Users user = usersRepo.findByUsername(username);\n        return user != null;\n    }\n\n    public String verify(String username, String password) {\n        Users user;\n        if(username.contains(\"@\")){\n            user = usersRepo.findByEmail(username);\n            if  (user == null) return \"User not found with \"+username+\" Email\";\n        }else{\n            user = usersRepo.findByUsername(username);\n            if  (user == null) return \"User not found with \"+username+\" username\";\n        }\n\n        if(!user.isEnable()){\n            return user.getEmail()+\" is not verified\";\n        }\n\n        Authentication authentication = authenticationManager\n                .authenticate(new UsernamePasswordAuthenticationToken(user.getUsername(),password));\n\n        if(authentication.isAuthenticated()) return jwtService.generateToken(user.getUsername());\n\n        return \"Invalid credentials password not match\";\n    }\n\n    public ResponseEntity<?> isHaveEmail(String email) {\n        Users user = usersRepo.findByEmail(email);\n        if(user != null) return ResponseEntity.ok(true);\n        return ResponseEntity.ok(false);\n    }\n\n    public String uploadPic(MultipartFile multipartFile,int target) throws IOException {\n        UserDetails userDetails = (UserDetails) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        String url = firebaseService.uploadFile(multipartFile);\n        Users user = usersRepo.findByUsername(userDetails.getUsername());\n        if(target == 0) user.setProfilePic(url);\n        else user.setCoverPic(url);\n        usersRepo.save(user);\n        return \"Uploaded\";\n    }\n\n    public Users getMyProfile() {\n        UserDetails userDetails = (UserDetails) SecurityContextHolder\n                .getContext().getAuthentication().getPrincipal();\n        return usersRepo.findByUsername(userDetails.getUsername());\n    }\n\n    public Users updateBio(String newBio) {\n        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        Users user = usersRepo.findByUsername(userDetails.getUsername());\n        user.setBio(newBio);\n        return usersRepo.save(user);\n    }\n\n    public Users getProfile(Long id) {\n        return usersRepo.findById(id).orElse(null);\n    }\n\n    public String updateAddress(Long id) {\n        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n        Users user = usersRepo.findByUsername(userDetails.getUsername());\n        Address address = addressRepo.findById(id).orElse(null);\n        user.setAddress(address);\n        usersRepo.save(user);\n        return \"Address updated\";\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Service/UserService.java b/src/main/java/com/pet/Pet/Service/UserService.java
--- a/src/main/java/com/pet/Pet/Service/UserService.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Service/UserService.java	(date 1731133683250)
@@ -1,6 +1,9 @@
 package com.pet.Pet.Service;
 
+import com.pet.Pet.DTO.PetDTO;
+import com.pet.Pet.DTO.UserDTO;
 import com.pet.Pet.Model.Address;
+import com.pet.Pet.Model.UserPrincipal;
 import com.pet.Pet.Model.Users;
 import com.pet.Pet.Repo.AddressRepo;
 import com.pet.Pet.Repo.UsersRepo;
@@ -17,6 +20,7 @@
 import org.springframework.web.multipart.MultipartFile;
 
 import java.io.IOException;
+import java.util.List;
 import java.util.Random;
 import java.util.concurrent.TimeUnit;
 
@@ -41,6 +45,19 @@
 
     private final BCryptPasswordEncoder encoder = new BCryptPasswordEncoder(12);
 
+    public UserPrincipal getUserPrincipal() {
+        UserPrincipal userPrincipal = null;
+        try {
+            Object principal = SecurityContextHolder.getContext().getAuthentication().getPrincipal();
+            if (principal instanceof UserPrincipal) {
+                userPrincipal = (UserPrincipal) principal;
+            }
+        } catch (Exception e) {
+            // Handle the case where there might be no authenticated user or an error occurs
+        }
+        return userPrincipal;
+    }
+
     public Users OtpSender(Users user) throws Exception {
         String OTP = String.format("%06d", new Random().nextInt(1000000));
         user.setOTP(OTP);
@@ -142,4 +159,10 @@
         usersRepo.save(user);
         return "Address updated";
     }
+
+    public ResponseEntity<UserDTO> getUserDto(String username) {
+        return usersRepo.findByUsernameFilter(username)
+                .map(ResponseEntity::ok)
+                .orElse(ResponseEntity.notFound().build());
+    }
 }
