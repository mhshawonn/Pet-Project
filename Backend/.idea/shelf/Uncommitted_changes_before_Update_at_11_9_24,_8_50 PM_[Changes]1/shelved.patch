Index: src/main/java/com/pet/Pet/Model/AdoptionRequest.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Model;\n\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.time.LocalDateTime;\nimport java.util.List;\n\n@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class AdoptionRequest {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long Id;\n    private int numberOfExitingPets;\n    private Long timeStamp;\n    private String notes;\n    private String reasonOfTheAdoption;\n    private List<String> certificates;\n    private String status;\n\n    @ManyToOne\n    @JoinColumn(name = \"pet_id\", referencedColumnName = \"id\")\n    private Pet pet;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\", referencedColumnName = \"id\")\n    private Users requestUsers;\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Model/AdoptionRequest.java b/src/main/java/com/pet/Pet/Model/AdoptionRequest.java
--- a/src/main/java/com/pet/Pet/Model/AdoptionRequest.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Model/AdoptionRequest.java	(date 1731142149808)
@@ -1,5 +1,6 @@
 package com.pet.Pet.Model;
 
+import com.fasterxml.jackson.annotation.JsonIgnore;
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
 import lombok.Data;
@@ -23,6 +24,7 @@
     private List<String> certificates;
     private String status;
 
+    @JsonIgnore
     @ManyToOne
     @JoinColumn(name = "pet_id", referencedColumnName = "id")
     private Pet pet;
Index: src/main/java/com/pet/Pet/Service/PetService.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Service;\n\nimport com.pet.Pet.Model.Animal;\nimport com.pet.Pet.Model.Category;\nimport com.pet.Pet.Model.Pet;\nimport com.pet.Pet.Model.Users;\nimport com.pet.Pet.Repo.*;\nimport org.springframework.beans.factory.annotation.Autowired;\nimport org.springframework.data.jpa.repository.support.SimpleJpaRepository;\nimport org.springframework.security.core.context.SecurityContextHolder;\nimport org.springframework.security.core.userdetails.UserDetails;\nimport org.springframework.stereotype.Service;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.io.IOException;\nimport java.util.List;\n\n@Service\npublic class PetService {\n    @Autowired\n    private FirebaseService firebaseService;\n    @Autowired\n    private AnimalRepo animalRepo;\n    @Autowired\n    private CategoryRepo categoryRepo;\n    @Autowired\n    private PetRepo petRepo;\n    @Autowired\n    private UsersRepo usersRepo;\n    @Autowired\n    private AddressRepo addressRepo;\n\n//    public String addPet(Pet pet, List<MultipartFile> multipartFiles, Long animalId, List<Long> categoryIds, Long addressId) throws IOException {\n//        List<String> urls = firebaseService.uploadFiles(multipartFiles);\n//        pet.setMedia(urls);\n//\n//        Animal animal = animalRepo.findById(animalId).orElseThrow(() -> new RuntimeException(\"Animal not found\"));\n//        pet.setAnimal(animal);\n//        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();\n//        Users user = usersRepo.findByUsername(userDetails.getUsername());\n//        pet.setOwner(user);\n//        pet.setAddress((addressId != null ? addressRepo.findById(addressId).orElse(null) : user.getAddress()));\n//\n//        for (Long categoryId : categoryIds) {\n//            Category category = (Category) categoryRepo.findById(categoryId).orElse(null);\n//            if (category == null) continue;\n//            pet.getCategories().add(category);\n//        }\n//        pet.setReportCount(0L);\n//\n//    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Service/PetService.java b/src/main/java/com/pet/Pet/Service/PetService.java
--- a/src/main/java/com/pet/Pet/Service/PetService.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Service/PetService.java	(date 1731133879165)
@@ -1,18 +1,26 @@
 package com.pet.Pet.Service;
 
-import com.pet.Pet.Model.Animal;
-import com.pet.Pet.Model.Category;
-import com.pet.Pet.Model.Pet;
-import com.pet.Pet.Model.Users;
+import com.pet.Pet.DTO.PetDTO;
+import com.pet.Pet.DTO.ReactDTO;
+import com.pet.Pet.DTO.UserDTO;
+import com.pet.Pet.Model.*;
 import com.pet.Pet.Repo.*;
 import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.PageRequest;
+import org.springframework.data.domain.Pageable;
+import org.springframework.data.domain.Sort;
 import org.springframework.data.jpa.repository.support.SimpleJpaRepository;
 import org.springframework.security.core.context.SecurityContextHolder;
+import org.springframework.security.core.userdetails.User;
 import org.springframework.security.core.userdetails.UserDetails;
 import org.springframework.stereotype.Service;
+import org.springframework.web.bind.annotation.GetMapping;
+import org.springframework.web.bind.annotation.PathVariable;
 import org.springframework.web.multipart.MultipartFile;
 
 import java.io.IOException;
+import java.util.ArrayList;
 import java.util.List;
 
 @Service
@@ -29,24 +37,98 @@
     private UsersRepo usersRepo;
     @Autowired
     private AddressRepo addressRepo;
+    @Autowired
+    private ReactRepo reactRepo;
+    @Autowired
+    private AdoptionRepo adoptionRepo;
+    @Autowired
+    private UserService userService;
+
+    public String addPet(Pet pet, List<MultipartFile> multipartFiles, Long animalId, List<Long> categoryIds, Long addressId) throws IOException {
+
+        UserPrincipal userPrincipal = userService.getUserPrincipal();
+        if (userPrincipal == null) {
+            throw new RuntimeException("User not authenticated");
+        }
+        Users user =  usersRepo.findByUsername(userPrincipal.getUsername());
+        pet.setOwner(user);
+
+        pet.setAddress((addressId != null ? addressRepo.findById(addressId).orElse(user.getAddress()) : user.getAddress()));
+
+        List<Category> categories = new ArrayList<Category>();
+        for (Long categoryId : categoryIds) {
+            Category category = (Category) categoryRepo.findById(categoryId).orElse(null);
+            if (category == null) continue;
+            categories.add(category);
+        }
+        pet.setCategories(categories);
+
+        List<String> urls = firebaseService.uploadFiles(multipartFiles);
+        pet.setMedia(urls);
+
+        Animal animal = animalRepo.findById(animalId).orElseThrow(() -> new RuntimeException("Animal not found"));
+        pet.setAnimal(animal);
+
+        pet.setReportCount(0L);
+        pet.setTimeStamp(System.currentTimeMillis());
+        pet.setReportStatus(false);
+        pet.setNumberOfRequests(0L);
+        pet.setStatus("Available");
+        petRepo.save(pet);
+        return "Pet added successfully";
+    }
+
+    public Page<PetDTO> getPets(int page, String sortAttribute, int order) {
+        UserPrincipal userPrincipal = userService.getUserPrincipal();
+        Long userId = (userPrincipal != null) ? userPrincipal.getId() : null;
+
+        if (sortAttribute == null) {
+            sortAttribute = "id";
+        }
+        Sort sort = (order == 0) ? Sort.by(Sort.Order.desc(sortAttribute)) : Sort.by(Sort.Order.asc(sortAttribute));
+        Pageable pageable = PageRequest.of(page, 10, sort);
+        Page<PetDTO> petPage = petRepo.findAllPet(pageable);
+        return setDataForPets(petPage,userId);
+    }
+
+    private Page<PetDTO> setDataForPets(Page<PetDTO> petPage,Long id) {
+        if(id==null){
+            for(PetDTO pet : petPage) {
+                pet.setNumberOfReact(reactRepo.countByPostIdAndPostTypeAndIsSavedFalse(pet.getId(),0));
+                pet.setNumberOfRequests(adoptionRepo.countByPetId(pet.getId()));
+            }
+        }else{
+            for(PetDTO pet : petPage) {
+                pet.setNumberOfReact(reactRepo.countByPostIdAndPostTypeAndIsSavedFalse(pet.getId(),0));
+                pet.setReactType(reactRepo.findByUserIdAndPostIdAndPostTypeAndIsSavedFalse(id,pet.getId(),0));
+                pet.setNumberOfRequests(adoptionRepo.countByPetId(pet.getId()));
+            }
+        }
+        return petPage;
+    }
 
-//    public String addPet(Pet pet, List<MultipartFile> multipartFiles, Long animalId, List<Long> categoryIds, Long addressId) throws IOException {
-//        List<String> urls = firebaseService.uploadFiles(multipartFiles);
-//        pet.setMedia(urls);
-//
-//        Animal animal = animalRepo.findById(animalId).orElseThrow(() -> new RuntimeException("Animal not found"));
-//        pet.setAnimal(animal);
-//        UserDetails userDetails = (UserDetails) SecurityContextHolder.getContext().getAuthentication().getPrincipal();
-//        Users user = usersRepo.findByUsername(userDetails.getUsername());
-//        pet.setOwner(user);
-//        pet.setAddress((addressId != null ? addressRepo.findById(addressId).orElse(null) : user.getAddress()));
-//
-//        for (Long categoryId : categoryIds) {
-//            Category category = (Category) categoryRepo.findById(categoryId).orElse(null);
-//            if (category == null) continue;
-//            pet.getCategories().add(category);
-//        }
-//        pet.setReportCount(0L);
-//
-//    }
+
+    public Pet getPet(Long id) {
+        UserPrincipal userPrincipal = userService.getUserPrincipal();
+        Long userId = (userPrincipal != null) ? userPrincipal.getId() : null;
+        Pet pet = petRepo.findPetById(id);
+        if(userId==null){
+            pet.setNumberOfReact(reactRepo.countByPostIdAndPostTypeAndIsSavedFalse(pet.getId(),0));
+            pet.setNumberOfRequests(adoptionRepo.countByPetId(pet.getId()));
+        }else{
+            pet.setNumberOfReact(reactRepo.countByPostIdAndPostTypeAndIsSavedFalse(pet.getId(),0));
+            pet.setReactType(reactRepo.findByUserIdAndPostIdAndPostTypeAndIsSavedFalse(userId,pet.getId(),0));
+            pet.setNumberOfRequests(adoptionRepo.countByPetId(pet.getId()));
+        }
+        return pet;
+    }
+
+    public List<PetDTO> getSavedPet(int i) {
+        UserPrincipal userPrincipal = userService.getUserPrincipal();
+        Long userId = (userPrincipal != null) ? userPrincipal.getId() : null;
+        List<PetDTO> petDTOS = new ArrayList<>();
+        List<Long> postIds = reactRepo.findPostIdsByUserIdAndPostTypeAndIsSavedTrue(userId,0);
+        petDTOS = petRepo.findAllByIdFilter(postIds);
+        return petDTOS;
+    }
 }
Index: src/main/java/com/pet/Pet/Controller/PetController.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Controller;\n\nimport com.pet.Pet.Model.Pet;\nimport com.pet.Pet.Service.PetService;\nimport jakarta.mail.Multipart;\nimport org.springframework.web.bind.annotation.*;\nimport org.springframework.web.multipart.MultipartFile;\n\nimport java.util.List;\n\n@RestController\n@RequestMapping(\"/address\")\npublic class PetController {\n    private PetService petService;\n//    @PostMapping(\"/add\")\n//    public String add(@RequestPart Pet pet,\n//                      @RequestPart List<MultipartFile> multipartFiles,\n//                      @RequestParam Long animal_id,\n//                      @RequestParam List<Long> category_ids,\n//                      @RequestParam Long address_id){\n//        return petService.addPet(pet,multipartFiles,animal_id,category_ids,address_id);\n//\n//    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Controller/PetController.java b/src/main/java/com/pet/Pet/Controller/PetController.java
--- a/src/main/java/com/pet/Pet/Controller/PetController.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Controller/PetController.java	(date 1731142918493)
@@ -1,24 +1,76 @@
 package com.pet.Pet.Controller;
 
+import com.pet.Pet.DTO.PetDTO;
+import com.pet.Pet.DTO.ReactDTO;
+import com.pet.Pet.Model.AdoptionRequest;
 import com.pet.Pet.Model.Pet;
+import com.pet.Pet.Model.UserPrincipal;
+import com.pet.Pet.Service.AdoptionService;
 import com.pet.Pet.Service.PetService;
+import com.pet.Pet.Service.ReactService;
 import jakarta.mail.Multipart;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.data.domain.Page;
 import org.springframework.web.bind.annotation.*;
 import org.springframework.web.multipart.MultipartFile;
 
+import java.io.IOException;
 import java.util.List;
 
 @RestController
-@RequestMapping("/address")
+@RequestMapping("/pet")
 public class PetController {
+    @Autowired
     private PetService petService;
-//    @PostMapping("/add")
-//    public String add(@RequestPart Pet pet,
-//                      @RequestPart List<MultipartFile> multipartFiles,
-//                      @RequestParam Long animal_id,
-//                      @RequestParam List<Long> category_ids,
-//                      @RequestParam Long address_id){
-//        return petService.addPet(pet,multipartFiles,animal_id,category_ids,address_id);
-//
-//    }
+    @Autowired
+    private ReactService reactService;
+    @Autowired
+    private AdoptionService adoptionService;
+
+    @PostMapping("/add")
+    public String add(@RequestPart Pet pet,
+                      @RequestPart List<MultipartFile> files,
+                      @RequestParam Long animal_id,
+                      @RequestParam List<Long> category_ids,
+                      @RequestParam(required = false) Long address_id) throws IOException {
+
+        return petService.addPet(pet,files,animal_id,category_ids,address_id);
+    }
+
+    @GetMapping("/get/{page}")
+    public Page<PetDTO> getPets(@PathVariable  int page,@RequestParam String sort,@RequestParam int order) throws IOException {
+        return petService.getPets(page,sort,order);
+    }
+
+    @GetMapping("/getById/{id}")
+    public Pet getPet(@PathVariable Long id) throws IOException {
+        return petService.getPet(id);
+    }
+    @GetMapping("/giveReact/{id}/{type}")
+    public String giveReact(@PathVariable Long id,@PathVariable int type) throws IOException {
+        return reactService.giveReact(id,type,0);
+    }
+
+    @GetMapping("/getReactCount/{id}")
+    public List<Object[]> getReactCount(@PathVariable Long id) throws IOException {
+        return reactService.getReactCount(id,0);
+    }
+
+    @GetMapping("/getReact/{id}")
+    public List<ReactDTO> getReact(@PathVariable Long id) throws IOException {
+        return reactService.getReact(id,0);
+    }
+    @GetMapping("/savePet/{id}")
+    public String giveReact(@PathVariable Long id) throws IOException {
+        return reactService.saveLater(id, 0);
+    }
+    @GetMapping("/getSavedPet")
+    public List<PetDTO> getSavedPet() throws IOException {
+        return petService.getSavedPet(0);
+    }
+    @PostMapping("/requestAdoption/{id}")
+    public String requestAdoption(@PathVariable Long id, @RequestPart AdoptionRequest body,
+                                  @RequestPart List<MultipartFile> files) throws IOException {
+        return adoptionService.requestAdoption(id, body, files);
+    }
 }
Index: src/main/java/com/pet/Pet/Repo/PetRepo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Repo;\n\nimport com.pet.Pet.Model.Pet;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface PetRepo extends JpaRepository<Pet, Long> {\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Repo/PetRepo.java b/src/main/java/com/pet/Pet/Repo/PetRepo.java
--- a/src/main/java/com/pet/Pet/Repo/PetRepo.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Repo/PetRepo.java	(date 1731140198227)
@@ -1,9 +1,30 @@
 package com.pet.Pet.Repo;
 
+import com.pet.Pet.DTO.PetDTO;
 import com.pet.Pet.Model.Pet;
+import org.springframework.data.domain.Page;
+import org.springframework.data.domain.Pageable;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.data.repository.query.Param;
 import org.springframework.stereotype.Repository;
+import org.w3c.dom.stylesheets.LinkStyle;
+
+import java.util.List;
 
 @Repository
 public interface PetRepo extends JpaRepository<Pet, Long> {
+
+    @Query("SELECT new com.pet.Pet.DTO.PetDTO(p.id, p.name, p.description,p.timeStamp, p.media, u.id, u.name, " +
+            "u.profilePic,p.address,p.numberOfReact,p.numberOfRequests,p.reactType) " +
+            "FROM Pet p JOIN p.owner u")
+    Page<PetDTO> findAllPet(Pageable pageable);
+
+    Pet findPetById(Long id);
+
+    @Query("SELECT new com.pet.Pet.DTO.PetDTO(p.id, p.name, p.description, p.timeStamp, p.media, u.id, u.name, " +
+            "u.profilePic, p.address, p.numberOfReact, p.numberOfRequests, p.reactType) " +
+            "FROM Pet p JOIN p.owner u WHERE p.id IN :postIds")
+    List<PetDTO> findAllByIdFilter(List<Long> postIds);
+
 }
Index: src/main/java/com/pet/Pet/Repo/UsersRepo.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Repo;\n\nimport com.pet.Pet.Model.Users;\nimport org.springframework.data.jpa.repository.JpaRepository;\nimport org.springframework.stereotype.Repository;\n\n@Repository\npublic interface UsersRepo extends JpaRepository<Users,Long> {\n    Users findByUsername(String username);\n\n    Users findByEmail(String email);\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Repo/UsersRepo.java b/src/main/java/com/pet/Pet/Repo/UsersRepo.java
--- a/src/main/java/com/pet/Pet/Repo/UsersRepo.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Repo/UsersRepo.java	(date 1731142918499)
@@ -1,12 +1,26 @@
 package com.pet.Pet.Repo;
 
+import com.pet.Pet.DTO.UserDTO;
 import com.pet.Pet.Model.Users;
 import org.springframework.data.jpa.repository.JpaRepository;
+import org.springframework.data.jpa.repository.Query;
+import org.springframework.http.ResponseEntity;
 import org.springframework.stereotype.Repository;
 
+import java.util.Optional;
+
 @Repository
 public interface UsersRepo extends JpaRepository<Users,Long> {
+
     Users findByUsername(String username);
 
     Users findByEmail(String email);
+
+//    @Query("SELECT u FROM Users u WHERE u.username = ?1")
+//    Users findByUsernameFilter(String username);
+    @Query("SELECT new com.pet.Pet.DTO.UserDTO(u.id, u.username, u.name, u.profilePic) FROM Users u WHERE u.username = ?1")
+    Optional<UserDTO> findByUsernameFilter(String username);
+
+    @Query("SELECT new com.pet.Pet.DTO.UserDTO(u.id, u.username, u.name, u.profilePic) FROM Users u WHERE u.id = ?1")
+    UserDTO findByIdFilter(Long id);
 }
Index: src/main/java/com/pet/Pet/Service/AdoptionService.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/Service/AdoptionService.java b/src/main/java/com/pet/Pet/Service/AdoptionService.java
new file mode 100644
--- /dev/null	(date 1731142963172)
+++ b/src/main/java/com/pet/Pet/Service/AdoptionService.java	(date 1731142963172)
@@ -0,0 +1,47 @@
+package com.pet.Pet.Service;
+
+import com.pet.Pet.Model.AdoptionRequest;
+import com.pet.Pet.Model.Pet;
+import com.pet.Pet.Model.UserPrincipal;
+import com.pet.Pet.Model.Users;
+import com.pet.Pet.Repo.AdoptionRepo;
+import com.pet.Pet.Repo.PetRepo;
+import com.pet.Pet.Repo.UsersRepo;
+import org.springframework.beans.factory.annotation.Autowired;
+import org.springframework.security.core.userdetails.User;
+import org.springframework.stereotype.Service;
+import org.springframework.web.multipart.MultipartFile;
+
+import java.io.IOException;
+import java.util.List;
+
+@Service
+public class AdoptionService {
+    @Autowired
+    private FirebaseService firebaseService;
+    @Autowired
+    private AdoptionRepo adoptionRepo;
+    @Autowired
+    private UserService userService;
+    @Autowired
+    private PetRepo petRepo;
+    @Autowired
+    private UsersRepo usersRepo;
+
+    public String requestAdoption(Long id, AdoptionRequest body, List<MultipartFile> files) throws IOException {
+        Pet pet = petRepo.findById(id).orElse(null);
+        UserPrincipal userPrincipal = userService.getUserPrincipal();
+        Users user = usersRepo.findById(userPrincipal.getId()).orElse(null);
+        if(pet == null || user == null) {
+            throw new RuntimeException("Pet or User not found");
+        }
+        body.setRequestUsers(user);
+        body.setPet(pet);
+        body.setTimeStamp(System.currentTimeMillis());
+        List<String> urls = firebaseService.uploadFiles(files);
+        body.setCertificates(urls);
+        body.setStatus("Pending");
+        adoptionRepo.save(body);
+        return "Adoption Requested";
+    }
+}
Index: src/main/java/com/pet/Pet/Repo/CommentRepo.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/Repo/CommentRepo.java b/src/main/java/com/pet/Pet/Repo/CommentRepo.java
new file mode 100644
--- /dev/null	(date 1731044930225)
+++ b/src/main/java/com/pet/Pet/Repo/CommentRepo.java	(date 1731044930225)
@@ -0,0 +1,7 @@
+package com.pet.Pet.Repo;
+
+import com.pet.Pet.Model.Comment;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface CommentRepo extends JpaRepository<Comment,Long> {
+}
Index: src/main/java/com/pet/Pet/Repo/ReportRepo.java
===================================================================
diff --git a/src/main/java/com/pet/Pet/Repo/ReportRepo.java b/src/main/java/com/pet/Pet/Repo/ReportRepo.java
new file mode 100644
--- /dev/null	(date 1731044969105)
+++ b/src/main/java/com/pet/Pet/Repo/ReportRepo.java	(date 1731044969105)
@@ -0,0 +1,7 @@
+package com.pet.Pet.Repo;
+
+import com.pet.Pet.Model.Report;
+import org.springframework.data.jpa.repository.JpaRepository;
+
+public interface ReportRepo extends JpaRepository<Report,Long> {
+}
Index: src/main/java/com/pet/Pet/Model/Users.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Model;\n\nimport com.fasterxml.jackson.annotation.JsonIgnore;\nimport com.google.firebase.database.annotations.NotNull;\nimport jakarta.persistence.*;\nimport lombok.AllArgsConstructor;\nimport lombok.Data;\nimport lombok.NoArgsConstructor;\n\nimport java.time.LocalDateTime;\nimport java.util.Date;\nimport java.util.HashSet;\nimport java.util.List;\nimport java.util.Set;\n\n@Entity\n@Data\n@AllArgsConstructor\n@NoArgsConstructor\npublic class Users {\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n    @Column(unique = true)\n    @NotNull\n    private String username;\n    @NotNull\n    private String name;\n    @Column(length = 1000)\n    private String bio;\n    @NotNull\n    @Column(unique = true)\n    private String email;\n    private String phone;\n    @Column(length = 1000)\n    @JsonIgnore\n    private String password;\n    private String profilePic;\n    private String coverPic;\n    private String role;\n    private String dob;\n    @JsonIgnore\n    private String OTP;\n    @JsonIgnore\n    private Long ExpireTimeOfOtp;\n    @JsonIgnore\n    private boolean enable;\n    private int reportCount;\n    private Long reportedTill;\n\n    @ManyToOne(cascade = CascadeType.ALL)\n    @JoinColumn(name = \"address\", referencedColumnName = \"id\")\n    private Address address;\n\n    @JsonIgnore\n    @OneToMany(mappedBy = \"owner\", cascade = CascadeType.ALL)\n    private Set<Pet> pets = new HashSet<>();\n\n    @JsonIgnore\n    @OneToMany(mappedBy = \"requestUsers\", cascade = CascadeType.ALL)\n    private Set<AdoptionRequest> adoptionRequests = new HashSet<>();\n\n    @JsonIgnore\n    @OneToMany(mappedBy = \"userFrom\",cascade = CascadeType.ALL)\n    private Set<Comment> comments = new HashSet<>();\n\n    @JsonIgnore\n    @OneToMany(mappedBy = \"reportBy\",cascade = CascadeType.ALL)\n    private Set<Report> reported = new HashSet<>();\n\n    @JsonIgnore\n    @OneToMany(mappedBy = \"reviewBy\",cascade = CascadeType.ALL)\n    private Set<Report> reviewed = new HashSet<>();\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Model/Users.java b/src/main/java/com/pet/Pet/Model/Users.java
--- a/src/main/java/com/pet/Pet/Model/Users.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Model/Users.java	(date 1731055979466)
@@ -1,6 +1,7 @@
 package com.pet.Pet.Model;
 
 import com.fasterxml.jackson.annotation.JsonIgnore;
+import com.fasterxml.jackson.annotation.JsonProperty;
 import com.google.firebase.database.annotations.NotNull;
 import jakarta.persistence.*;
 import lombok.AllArgsConstructor;
@@ -33,17 +34,16 @@
     private String email;
     private String phone;
     @Column(length = 1000)
-    @JsonIgnore
+    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
     private String password;
     private String profilePic;
     private String coverPic;
     private String role;
     private String dob;
-    @JsonIgnore
+    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
     private String OTP;
-    @JsonIgnore
+    @JsonProperty(access = JsonProperty.Access.WRITE_ONLY)
     private Long ExpireTimeOfOtp;
-    @JsonIgnore
     private boolean enable;
     private int reportCount;
     private Long reportedTill;
Index: src/main/java/com/pet/Pet/Model/Token.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.pet.Pet.Model;\n\nimport jakarta.persistence.*;\nimport lombok.Data;\nimport org.hibernate.annotations.CreationTimestamp;\n\nimport java.security.Timestamp;\nimport java.time.LocalDateTime;\n\n@Entity\n@Data\n@Table(name = \"tokens\")\npublic class Token {\n\n    @Id\n    @GeneratedValue(strategy = GenerationType.IDENTITY)\n    private Long id;\n\n    @Column(unique = true)\n    private String token;\n\n    @CreationTimestamp\n    @Column(updatable = false)\n    private Timestamp timeStamp;\n\n    @Column(updatable = false)\n    @Basic(optional = false)\n    private LocalDateTime expireAt;\n\n    @ManyToOne\n    @JoinColumn(name = \"user_id\", referencedColumnName = \"id\")\n    private Users userToken;\n\n    @Transient\n    private boolean isExpired;\n\n    public boolean isExpired() {\n        return getExpireAt().isBefore(LocalDateTime.now());\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/com/pet/Pet/Model/Token.java b/src/main/java/com/pet/Pet/Model/Token.java
--- a/src/main/java/com/pet/Pet/Model/Token.java	(revision 63d9bc6467199236e91eb0bc02b08e8ae1e83ac9)
+++ b/src/main/java/com/pet/Pet/Model/Token.java	(date 1731082907322)
@@ -37,4 +37,7 @@
     public boolean isExpired() {
         return getExpireAt().isBefore(LocalDateTime.now());
     }
+
+    public static class Interested {
+    }
 }
